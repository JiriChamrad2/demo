<?php

/**
 * DatagridFilter
 *
 * This component for the NETTE framework is designed for filtering and sorting the set of entities generated by the OBO framework (http://www.obophp.org/)
 *
 * @version 1.0
 * @author Adam Suba, http://www.adamsuba.cz/
 * @copyright 2011 Adam Suba
 * @license http://www.apache.org/licenses/LICENSE-2.0 Apache License, Version 2.0
 */

abstract class DatagridFilter  extends \Nette\Application\UI\Control implements \obo\Interfaces\IFilter{

    /**
     * @var \Nette\Forms\Form
     */
    protected $form = null;
    protected $templateFile = null;
    protected $defaultValues = array();
    protected $datagridSnippetName = null;

    public function __construct($parent = NULL, $name = NULL) {
        parent::__construct($parent,$name);
        $this->templateFile = dirname(__FILE__) . "/DatagridFilter.latte";
        $this->presenter->context->session->getSection(strtoupper($this->name))->data;
        $this->makeForm();
    }


    public function getWhere(){
        return array();
    }

    public function getOrderBy(){
        return array();
    }


    protected function makeForm(){
        $this->form = $form =  $this->createFilterForm();
        $this->constructFilterForm();
        if ($form["reset"]->isSubmittedBy()) return;
        $form->onSuccess[] = callback($this, 'changeFilter');
        $this->fillFilterForm();
    }

    protected function createFilterForm(){

    }

    protected function constructFilterForm(){

    }

    protected function fillFilterForm($forced = false){
        if ($forced){
            $this->form->setValues($this->filterCriteria(), true);
        } else {
            $this->form->setDefaults($this->filterCriteria());
        }
        $this->afterChangeFilter();
    }


    protected function filterCriteria(){
        $data = $this->presenter->context->session->getSection(strtoupper($this->name))->data;
        if (is_array($data) OR \is_object($data)) return $data;
        return $this->setFilterCriteria($this->defaultValues);
    }

    protected function setFilterCriteria($criteria){
        return $this->presenter->context->session->getSection(strtoupper($this->name))->data = $criteria;
    }


    public function changeFilter(\Nette\Application\UI\Form $form){
        $this->setFilterCriteria($form->values);
        $this->fillFilterForm();
    }

    protected function afterChangeFilter(){
        if (\is_null($this->datagridSnippetName)) return;
        $this->presenter->redrawControl($this->datagridSnippetName);
    }

    public function resetFilter(\Nette\Forms\Controls\SubmitButton $button){
        $this->setFilterCriteria($this->defaultValues);
        $this->fillFilterForm(true);
        if (!$this->presenter->isAjax()) $this->redirect("this");
    }

    public function isActive(){
        $data = $this->presenter->context->session->getSection(strtoupper($this->name))->data;
        if ($data === $this->defaultValues) return false;
        return true;
    }

    public function render(){
        $this->template->setFile($this->templateFile);
        $this->template->form = $this->form;
        $this->template->filter = $this;
        $this->template->render();
    }
}